Solar Resource Data
883
734
37
GroupBox

1
7
Name
5
9
GroupBox2
X
3
9
Y
3
12
Width
3
870
Height
3
267
Caption
5
22
Solar Resource Library
Bold
2
1
Hyperlink

1
8
Name
5
10
Hyperlink2
X
3
24
Y
3
390
Width
3
847
Height
3
21
Caption
5
123
Go to SAM website Weather Page for information about NSRDB and PVGIS, and for links to other sources of solar resource data
URL
5
33
https://sam.nrel.gov/weather-data
TabOrder
3
0
Numeric

1
16
Name
5
11
annual_beam
X
3
183
Y
3
672
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
14
annual_diffuse
X
3
183
Y
3
699
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
13
annual_global
X
3
183
Y
3
645
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_snow
X
3
519
Y
3
699
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_tdry
X
3
519
Y
3
642
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_wspd
X
3
519
Y
3
672
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
7
Name
5
12
btn_download
X
3
636
Y
3
363
Width
3
234
Height
3
24
Caption
5
30
Download and add to library...
TabOrder
3
4294967295
TextEntry

1
10
Name
5
4
city
X
3
75
Y
3
531
Width
3
208
Height
3
24
Text
5
9
Your City
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
TextEntry

1
10
Name
5
7
country
X
3
75
Y
3
585
Width
3
208
Height
3
24
Text
5
3
usa
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
12
Name
5
23
downlad_weather_caption
X
3
24
Y
3
297
Width
3
846
Height
3
36
Caption
5
248
Download the latest weather files from the NSRDB to add to your solar resource library: Download a typical-year (TMY) file for most long-term cash flow analyses, or choose files to download for single-year or P50/P90 analyses. See Help for details.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Button

1
7
Name
5
15
dview_for_solar
X
3
714
Y
3
486
Width
3
153
Height
3
24
Caption
5
12
View data...
TabOrder
3
3
Numeric

1
16
Name
5
4
elev
X
3
366
Y
3
585
Width
3
103
Height
3
24
Value
1
317.000000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
2
 m
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Label

1
12
Name
5
14
folder_caption
X
3
24
Y
3
177
Width
3
846
Height
3
36
Caption
5
198
SAM scans the following folders on your computer for valid weather files and adds them to your Solar Resource library. To use weather files stored on your computer, add folders containing the files.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
TextEntry

1
10
Name
5
11
in_location
X
3
24
Y
3
363
Width
3
381
Height
3
24
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
StringArray

1
8
Name
5
16
in_location_list
X
3
306
Y
3
363
Width
3
99
Height
3
24
Label
5
13
Location List
Description
5
51
Type or import a list of addresses or lat,lon pairs
TabOrder
3
4294967295
RadioChoice

1
10
Name
5
19
in_location_options
X
3
24
Y
3
336
Width
3
261
Height
3
24
Selection
3
0
Items
6
2
One location
Multiple locations
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
4294967295
Choice

1
8
Name
5
16
in_nsrdb_options
X
3
408
Y
3
363
Width
3
222
Height
3
24
Items
6
4
Default TMY file
Choose year
Download files for all years (P50/P90)
Legacy and 30-minute (advanced)
Selection
3
0
TabOrder
3
4294967295
Numeric

1
16
Name
5
3
lat
X
3
558
Y
3
531
Width
3
103
Height
3
24
Value
1
1.100000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
3
 °N
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
10
Label

1
12
Name
5
7
lbl_csp
X
3
321
Y
3
336
Width
3
550
Height
3
24
Caption
5
92
SAM's CSP models use a different time convention than NREL NSRDB data. See Help for details.
TextColour
4
255
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
12
Name
5
15
library_caption
X
3
24
Y
3
27
Width
3
846
Height
3
18
Caption
5
155
The Solar Resource library is a list of weather files on your computer. Choose a file from the library, or use the tools below to add files to the library.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
MultilineText

1
10
Name
5
19
library_folder_list
X
3
24
Y
3
219
Width
3
603
Height
3
54
Text
5
38
List of Solar Resource library folders
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
3
lon
X
3
558
Y
3
558
Width
3
103
Height
3
24
Value
1
1.200000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
3
 °E
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
11
Divider

1
9
Name
5
9
object 22
X
3
30
Y
3
624
Width
3
645
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
50
Annual Averages Calculated from Weather File  Data
Bold
2
1
Divider

1
9
Name
5
11
object 2236
X
3
30
Y
3
513
Width
3
645
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
29
Header Data from Weather File
Bold
2
1
GroupBox

1
7
Name
5
8
object 4
X
3
9
Y
3
279
Width
3
870
Height
3
141
Caption
5
22
Download Weather Files
Bold
2
1
GroupBox

1
7
Name
5
10
object 423
X
3
9
Y
3
423
Width
3
870
Height
3
306
Caption
5
20
Weather Data Summary
Bold
2
1
Button

1
7
Name
5
15
refresh_library
X
3
636
Y
3
243
Width
3
234
Height
3
24
Caption
5
15
Refresh library
TabOrder
3
4
TextEntry

1
10
Name
5
20
solar_data_file_name
X
3
90
Y
3
486
Width
3
619
Height
3
24
Text
5
0
Editable
2
0
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
7
Name
5
19
solar_data_settings
X
3
636
Y
3
216
Width
3
234
Height
3
24
Caption
5
34
Add/remove weather file folders...
TabOrder
3
5
TextEntry

1
10
Name
5
17
solar_data_source
X
3
366
Y
3
558
Width
3
103
Height
3
24
Text
5
3
src
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Library

1
7
Name
5
14
solar_resource
X
3
24
Y
3
48
Width
3
846
Height
3
126
Library
5
17
SolarResourceData
Fields
5
69
Name,Latitude,Longitude,Time zone,Elevation,Station ID,Source,Version
TextEntry

1
10
Name
5
5
state
X
3
75
Y
3
558
Width
3
208
Height
3
24
Text
5
2
AX
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
TextEntry

1
10
Name
5
10
station_id
X
3
366
Y
3
531
Width
3
103
Height
3
24
Text
5
4
wban
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
12
Name
5
15
summary_caption
X
3
21
Y
3
444
Width
3
846
Height
3
36
Caption
5
170
The following information describes the data in the highlighted weather file from the Solar Resource library above. This is the file SAM will use when you click Simulate.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
16
Name
5
2
tz
X
3
558
Y
3
585
Width
3
103
Height
3
24
Value
1
-7.500000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
4
GMT 
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
8

29
annual_beam
3
1
Direct normal (beam)
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_diffuse
3
1
Diffuse horizontal
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_global
3
1
Global horizontal
kWh/m²/day
Location and Resource
0
20
1
1
1
1
0.000000
Numeric
annual_snow
3
1
Maximum snow depth
cm
Location and Resource
0
8
1
1
1
1
0.000000
Default
annual_tdry
3
1
Average temperature
°C
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_wspd
3
1
Average wind speed
m/s
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
city
3
4
City
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
country
3
4
Country
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
elev
3
1
Elevation
 
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
file_name
3
4
Resource file name
 
Location and Resource
0
9
1
4
0
Default
in_location
3
4
Location Input
 
Location and Resource
0
1
1
4
64
Type a street address or latitude, longitude (skip for advanced)
Default
in_location_list
3
4
List of Locations
 
 
3
abc
0
1
4
74
15458 Denver W Pkwy, Golden CO 804041|phoenix,az|45.5,-120.9|Manaus,Brazil
StringArray
in_location_options
3
1
Location Options
 
Location and Resource
0
1
1
1
1
1
0.000000
Default
in_nsrdb_options
3
1
NSRDB Options
 
Location and Resource
0
1
1
1
1
1
0.000000
Choice
lat
3
1
Latitude
°N
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
lbl_csp
3
4
 
 
Location and Resource
0
0
1
4
0
Default
library_folder_list
3
4
Solar Resource library folders
 
 
0
5
1
4
0
MultilineText
library_paths
3
4
 
 
 
0
8
1
4
0
Default
lon
3
1
Longitude
°E
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
solar_data_file_name
3
4
Weather file
 
Location and Resource
0
8
1
4
0
TextEntry
solar_data_source
3
4
Data Source
 
Location and Resource
0
8
1
4
0
TextEntry
solar_resource
3
4
Location
 
Location and Resource
19
SolarResourceData|0
19
1
4
0
Library
solar_resource_file
3
4
Weather file on disk
 
Location and Resource
0
8
1
4
0
Default
state
3
4
State
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
station_id
3
4
Station ID
 
Location and Resource
0
8
1
4
0
TextEntry
tz
3
1
Time zone
 
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
use_specific_weather_file
3
1
Use weather file on disk
 
Location and Resource
0
3
1
1
1
1
0.000000
CheckBox
user_specified_weather_file
3
4
Weather file on disk
 
Location and Resource
0
3
1
4
0
TextEntry
wf_nrecords
3
1
Number of weather file records
 
Location and Resource
0
4
1
1
1
1
8760.000000
Default

352
equations{'solar_resource_file'} = define() {
	if ( ${use_specific_weather_file} ) return ${user_specified_weather_file};
	else return ${solar_data_file_name};
};

equations{'file_name'} = define() {
	// for compatibility with most SSC APIs
	return ${solar_resource_file};
};

equations{'library_folder_list'} = define() {
	return ${library_paths};
};	
13357

on_load{'Solar Resource Data'} = define() {
	on_change{'use_specific_weather_file'}();
	show('annual_snow',technology() == "Flat Plate PV");
	display_csp_message();
	on_change{'in_location_options'}();
	on_change{'in_nsrdb_options'}();
	set_library_paths();
	refresh();
};

on_change{'solar_data_file_name'} = define() {

	wf = value('solar_data_file_name');
	if (!file_exists(wf))
	{
		rescanlibrary( 'solar' );
		set_library_paths();
		refresh('solar_resource');
		return;
	}
	
	
	obj = ssc_create();
	ssc_var( obj, 'file_name', wf );
	if ( 0 == ssc_exec( obj, 'wfreader' ) )
	{
		value( 'annual_global', ssc_var(obj, 'annual_global') );
		value( 'annual_beam', ssc_var(obj, 'annual_beam') );
		value( 'annual_diffuse', ssc_var(obj, 'annual_diffuse') );
		value( 'annual_tdry', ssc_var(obj, 'annual_tdry') );
		value( 'annual_wspd', ssc_var(obj, 'annual_wspd') );
		value( 'annual_snow', ssc_var(obj, 'annual_snow') );

		// used for timestep calculation in editscene3d
		value( 'wf_nrecords', ssc_var(obj, 'nrecords') );
	}
	else
	{
		value( 'annual_global', nan() );
		value( 'annual_beam', nan() );
		value( 'annual_diffuse', nan() );
		value( 'annual_tdry', nan() );
		value( 'annual_wspd', nan() );
		value( 'annual_snow', nan() );
		value( 'wf_nrecords', nan() );
	}	
	
	ssc_free( obj );
};

on_change{'use_specific_weather_file'} = define() {
	enable( 'user_specified_weather_file', value('use_specific_weather_file') );
	enable( 'select_weather_file', value('use_specific_weather_file') );
};


on_change{'select_weather_file'} = define() {
	file = choose_file( '', 'Choose a weather file', 
		'All Weather Files (*.tm2,*.tm3,*.epw,*.smw,*.csv)|*.tm2;*.tm3;*.epw;*.smw;*.csv');
		
	if ( file != '' ) {
		file = replace(file, '\\', '/');
		value( 'user_specified_weather_file', file );
	}
};

function set_library_paths()
{
	x = get_settings('NSRDBDownloadFolder');
	if ( strlen( x ) > 0 ) 
		x += '\n';
	x += get_settings('solar_data_paths');
	x = replace( x, ';', '\n');
	value('library_paths', x );
}

function display_csp_message() 
{
	tech = technology();
	csp_techs = ['Physical Trough','Empirical Trough','MSPT','DSPT','MSLF','DSLF','Dish Stirling','Generic CSP System'];
	is_csp = false;
	for ( i=0; i<#csp_techs; i++ )
		if ( tech == csp_techs[i] )
			is_csp = true;
	show( 'lbl_csp' , is_csp );
	refresh();
}

on_change{ 'in_location_options' } = define() {
	show('in_location_list',  value('in_location_options') == 1 && value('in_nsrdb_options') != 3);
	show('in_location',       value('in_location_options') == 0 && value('in_nsrdb_options') != 3);
	refresh();
};

on_change{ 'in_nsrdb_options' } = define() {
	show('in_location_list',   value('in_location_options') == 1 && value('in_nsrdb_options') != 3 );
	show('in_location',        value('in_location_options') == 0 && value('in_nsrdb_options') != 3 );
	show('in_location_options', value('in_nsrdb_options') != 3 );
	refresh();
};

// display window for advanced download
nsrdb_all = define() {
	hash = nsrdbquery();
	// meta data
	if ( hash != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				value( 'use_specific_weather_file', 1 );
				fn = replace(fn, '\\', '/');
				value( 'user_specified_weather_file', fn );
			}
		}
		else
		{
			rescanlibrary( 'solar' );
			if (fn != '')
			{
				value( 'use_specific_weather_file', 0 );
				libkey = file_only( fn );
				libkey = mid(libkey,0,#libkey-4);		
				value( 'solar_resource', libkey );
			}

		}
	}
};

on_change{'refresh_library'} = define() {
	rescanlibrary('solar');
};

on_change{'solar_data_settings'} = define() {
	if ( showsettings( 'solar' ) )
		rescanlibrary( 'solar' );
	set_library_paths();	
};

on_change{'dview_for_solar'} = define() {
	if ( dview_solar(value('solar_resource_file')) )
		msgbox("An error occurred when reading the solar data file:\n" + 
			value('solar_resource_file') );
};
/*
on_change{'open_containing_folder'} = define() {
	browse( path_only(value('solar_data_file_name')) );
};
*/

on_change{'btn_download'} = define() {
	nsrdb_get( );
	rescanlibrary( 'solar' );
	set_library_paths();
	refresh('solar_resource');
};

/////////////////////////////////////////////
// NSRDB download functions
/////////////////////////////////////////////

// clean up location string to use as file name
clean_name = define ( location )
{
	name = location;
	name = replace( name , ', ' , ',' );
	name = replace( name , ',' , '_' );
	name = replace( name , '  ' , ' ' );
	name = replace( name , ' ' , '_' );
	return lower(name);
};

// return url for current dataset for a location
// uses NSRDB lat, lon as input instead of wkt
// because always downloading single file
nsrdb = define ( location )
{
	name = '';
	url = '';
	years = [];
	msg = '';
	g = geocode( location );
	if ( !g.ok ) // sometimes correct address fails but works on second try
	{
		msg += 'Geocoding failed for ' + location + '. Trying again. ';
		g = geocode( location );
	}
	
	if ( g.ok )
	{
		geocode_ok = true;
		json_ok = false;
		url = webapi( 'nsrdb_query' );
		url = replace( url, '<LAT>', g.lat );
		url = replace( url, '<LON>', g.lon );
		json_str = curl( url );
		var = json_read( json_str );
		if ( typeof( var ) == 'table' )
		{
			if ( var.error != null )
			{
				msg = var.error + '. ';
				if ( strpos( lower(var.error.code), 'api' ) > -1 ) // no or invalid api key
					msg += 'See private.h to set API keys.';
			}
			elseif ( var.outputs == null )
				msg = 'No NSRDB data available for \"' + location + '\".';
			elseif ( var.outputs == [] )
				msg = 'No NSRDB data available for \"' + location + '\".';
			else
				json_ok = true;
		}
		else
		{
			msg += 'NSRDB did not return valid JSON string:';
			msg += '`' + json_str + '`.\n';
			if ( strpos( lower(json_str), 'api' ) > -1 ) // no or invalid api key
				msg += 'See private.h to set API keys.';
		}
		if ( json_ok )
		{
			ok = true;
			name = var.outputs[0].displayName;
			url = split(var.outputs[0].links[0].link,'?')[0];
			years = var.outputs[0].availableYears;
		}	
	}
	else
	{
		geocode_ok = false;
		msg = 'Failed to convert to latitude-longitude pair: \"' + location + '\". ';
	}

	return { 'name' = name , 'msg' = msg , 'url' = url , 'years' = years , 'ok' = geocode_ok && json_ok , 'lat' = g.lat, 'lon' = g.lon };
};

wf_check = define( wf )
{
	if ( file_exists( wf ) )
	{
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
	}
	else
		result = 'Failed to open ' + wf + ' for checking.';
	return result;
};

// returns a single-year data file for the current NSRDB data available for 
// a location
nsrdb_get = define( )
{
	enum { TMY, SINGLE_YEAR, ALL_YEARS, ADVANCED };
	enum { ONE_LOCATION, MULTIPLE_LOCATIONS };
	msg = '';
	wf = '';
	download_ok = true;
	folder = wfdownloaddir();
	
	log_file = folder + '/sam_nsrdb_download_log.txt';
	if ( file_exists( log_file ) )
		flog = open( log_file , 'a' );
	else
		flog = open( log_file, 'w' );
		
	write_line( flog, '# NSRDB Download ' + date_time()  + '\n');
	
	if ( value( 'in_location_options' ) == ONE_LOCATION )
		location = value('in_location');
	else
	{
		location_list = value('in_location_list'); // string with '|' delimiter
		location_list = replace( location_list, '\"', '' ); // files from spreadsheets may use quotes for strings
		location = split(location_list, '|');
	}
	if ( typeof( location ) == 'string' )
		location = [ location ];

	write_line( flog, 'Requested location(s): ' + location + '\n');
	
	pb = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #location } );

	for ( n=0; n<#location; n++ )
	{
		write_line( flog, '## Location ' + to_string(n+1) + ' of ' + #location + ': \"' + location[n]  + '\"\n');
		progressbar( pb, { 'message' = 'Getting data availability for \"' + location[n] + '\".' , 'value' = 1+n } );
		dataset[n] = nsrdb( location[n] );
		if ( !dataset[n].ok )
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
			continue;
		}	

		x = value('in_nsrdb_options');
		if ( x == TMY ) // type is a string
			type = 'tmy';
		elseif ( x == SINGLE_YEAR ) // type is a number
		{
			y = choose_from_list( dataset[n].years, 'Choose a year', 'Available Years for \"' + location[n] +'\"', 0 ); 
			if (y == '')
			{
				download_ok = false;
				write_line( flog, 'Year not valid: Selection cancelled by user.\n' );
				continue;
			}
			else	
				type = to_int( y );
		}
		elseif ( x == ALL_YEARS ) // type is an array of numbers
			type = dataset[n].years;
		else // ADVANCED
		{
			nsrdb_all();
			return;
		}	

		write_line( flog, 'Requested year(s): ' + type + '\n' );

		// verify that type parameter is a valid value and convert to array if needed
		d = typeof( type );
		bad = [];
		if ( d == 'string' && type == 'tmy' ) // download tmy only
			type = ['tmy'];
		elseif ( d == 'string' ) // invalid parameter
			bad[0] = type;
		elseif ( d == 'number' ) // single year
		{
			type = [type];
			if( ( dataset[n].years ?@ type[0] ) == -1 )
				bad[0] = type[0];
		}	
		elseif ( n == 0 ) // multiple years, keep good years and remove bad years, only need to do once
		{	
			j=0;
			for ( i=0; i<#type; i++ )
			{
				if ( ( dataset[n].years ?@ type[i] ) == -1 ) 
				{
					bad[j] = type[i];
					j++;
				}	
			}
			for ( i=0; i<#bad; i++ )
				for ( j=0; j<#type; j++ )
					if ( type[j] == bad[i] )
						type -@ j;
		}

		if ( bad == [] )
			bad = 'None.';
		else 
			download_ok = false;
		write_line( flog, 'Invalid requested years: ' + bad  + '\n');

		if ( dataset[n].ok )
		{ 
			// portion of url that is the same for all download scenarios
			base_url = dataset[n].url;
			base_url += '?api_key=<SAMAPIKEY>';
			base_url += '&full_name=sam_user';
			base_url += '&email=<USEREMAIL>';
			base_url += '&affiliation=unknown'; 
			base_url += '&mailing_list=false';
			base_url += '&reason=SAM';
			base_url += '&interval=60';
			//base_url += '&attributes=dni,dhi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed'; //SEE NSRDB.CPP 
			base_url += '&utc=false';
			base_url += '&leap_day=false';
			base_url += '&interval=60';

			if ( #type > 1 && n==0)
			{
				progressbar( pb );
				pb = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'time' = false , 'max' = #location*#type } );
			}
			
			// for each year	
			for( i=0; i<#type; i++ )
			{
				write_line( flog, '### Year ' + to_string(i+1) + ' of ' + #type + ': ' + type[i]  + '\n');
				url = base_url + '&names=' + to_string(type[i]);
				url += '&wkt=POINT(' + dataset[n].lon + '%20' + dataset[n].lat + ')';
				//str_url = replace( url, mid( url, strpos( url, 'api_key=' ) + strlen( 'api_key=' ), 40 ), '<API_KEY>' );
				write_line( flog, '`' + url + '`\n');
				// create folder for multiple years to facilitate p50 p90
				// do not put tmy file in multiple year folder
				// use default folder if mdkir() fails
				path = folder + '/';
				if ( #type > 1 && strpos( lower(type[i]), 'tmy' ) == -1 )
				{
					path = folder + '/' + clean_name( location[n] + '/');
					if ( !dir_exists( path ) )
						if ( !mkdir( path, true ) )
							path = folder + '/';
				}
				fname = path + clean_name( location[n] ) + '_' + dataset[n].lat + '_' + dataset[n].lon + '_psmv3_60_' + type[i] + '.csv';
				if ( file_exists( fname ) )
					write_line( flog, '**File skipped, already exists: ' + fname + '**\n');
				else	
				{
					start = start_timer();
					progressbar( pb, { 'message' = 'Downloading ' + type[i] + ' file for \"' + location[n] + '\". File ' + to_string(i+n+1) + ' of ' + to_string(#location+#type) + '.' , 'value' = 1+i+n } );
					wf = curl( url , { 'file'= fname } ); // curl() should replace <SAMAPI> and <USEREMAIL > with values from private.h
					time = elapsed_time() / 1000;
					write_line( flog, 'Download time: ' + time + ' seconds.\n' );
					wf_error = wf_check( fname );
					if ( wf_error != 0 ) // usually indicates NSRDB returned a file containing error message instead of weather data
					{
						download_ok = false;
						nsrdb_message = read_text_file( fname );
						write_line( flog, '**Weather file test failed, ' + wf_error + ':** ' + fname + '.\n');
						write_line( flog, '**Message from NSRDB:** ```' + left( replace( nsrdb_message, '\n', ';'), 300 ) + '```\n');
						fname_new = replace( fname, '.csv' , '_bad.txt' ); // rename file so next download attempt won't detect existing file
						ok = rename_file( fname , fname_new );
						if ( ok ) 
							write_line( flog, '* File renamed to: ' + fname_new + '.\n' );
						else
							write_line( flog, '* Failed to rename ' + fname + '.\n' );	
					}
					else
						write_line( flog, '**Weather file test passed:** ' + fname + '.\n');
				}
			}
		}	
		else
		{
			download_ok = false;
			write_line( flog, '**' + dataset[n].msg + '**\n');
		}
		progressbar( pb, { 'message' = 'Done.' , 'value' = #location*#type } );
	}

	progressbar( pb );
	close ( flog );
	if ( download_ok )
		msg = 'Download finished.';
	else
		msg = 'Download finished with errors.';
		
	/*show_log = yesno( msg + '\nOpen log file?' );
	if ( show_log )
		browse( log_file );*/
	browse( path_only( log_file ) );
};
