////////////////////////////////////////////////////////////////////////////////
//                                                                            //
// SAM LK functions for reading interconnect component and definition         //
// configuration files                                                        //
//																			  //
//																			  //
//   NOTE: The interconnects need to be in ascending order in the file        //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


import_and_set_interconnects = define(csv_IntcCpnt, csv_IntcDef)
{
	n_cpntskip = 3;  // number of header lines in component file to skip
	cpntname_col = 0; k_col = 2; d_col = 3; l_col = 4; type_col = 5;
	n_defskip = 3;  // number of header lines in definition file to skip
	intcname_col = 0; ncpnts_col = 2; intc_cpnts_col = 3;

	NA_val = -1;

	if ( !file_exists(csv_IntcCpnt) ) {
		msgbox("Could not locate \"" + file_only(csv_IntcCpnt) + "\" " +
			   "in the directory: " + path_only(csv_IntcCpnt));
		exit;
	}
	if ( !file_exists(csv_IntcDef) ) {
		msgbox("Could not locate \"" + file_only(csv_IntcDef) + "\" " +
			   "in the directory: " + path_only(csv_IntcDef));
		exit;
	}

	// Read interconnect component and definition files into arrays
	arr_IntcCpnt = csvread( csv_IntcCpnt, {'skip'=n_cpntskip, 'numeric'=false});
	arr_IntcDef = csvread( csv_IntcDef, { 'skip'=n_defskip, 'numeric'=false } );

	// Create lookup table to return row index when given component name
	for ( row=0; row<#arr_IntcCpnt; row++ )
	{
		cpnt_index_name{arr_IntcCpnt[row][cpntname_col]} = row;
	}

	// Find the maximum number of components in any interconnect
	max_cpnts = 0;
	for ( i_intc=0; i_intc<#arr_IntcDef; i_intc++ )
		max_cpnts = max(max_cpnts, arr_IntcDef[i_intc][ncpnts_col]);

	// Create matrices of K, D, L, and Type values; row=intc. number, col=cpnt.
	for ( i_intc=0; i_intc<#arr_IntcDef; i_intc++ )  // for each def. file row
	{
		// Create array of components from each intc. and verify number of vals
		cpnts = split(arr_IntcDef[i_intc][intc_cpnts_col], '-');
		if ( #cpnts != to_int(arr_IntcDef[i_intc][ncpnts_col]) ) {
			msgbox("The number of " +
				   "interconnect components (intc_n_cpnts) " +
				   "does not match the number of components " +
				   "specified in \"" +
				   filename_IntcAssy + "\" for assembly " +
				   arr_IntcDef[i_intc][intcname_col] + " .");
			exit;
		}
		
		// Add component values to matrices
		for ( i_cpnt=0; i_cpnt<max_cpnts; i_cpnt++ )
		{
			if ( i_cpnt < to_int(arr_IntcDef[i_intc][ncpnts_col]) ) {
				K_cpnt[i_intc][i_cpnt] =
					to_real(arr_IntcCpnt[cpnt_index_name{cpnts[i_cpnt]}][k_col]);
				D_cpnt[i_intc][i_cpnt] =
					to_real(arr_IntcCpnt[cpnt_index_name{cpnts[i_cpnt]}][d_col]);
				L_cpnt[i_intc][i_cpnt] =
					to_real(arr_IntcCpnt[cpnt_index_name{cpnts[i_cpnt]}][l_col]);
				Type_cpnt[i_intc][i_cpnt] =
					to_real(arr_IntcCpnt[cpnt_index_name{cpnts[i_cpnt]}][type_col]);
			} else {
				K_cpnt[i_intc][i_cpnt] = NA_val;
				D_cpnt[i_intc][i_cpnt] = NA_val;
				L_cpnt[i_intc][i_cpnt] = NA_val;
				Type_cpnt[i_intc][i_cpnt] = NA_val;
			}
		}
	}
	
	// set SSC values
	set( 'K_cpnt', K_cpnt );
	set( 'D_cpnt', D_cpnt );
	set( 'L_cpnt', L_cpnt );
	set( 'Type_cpnt', Type_cpnt );
	
	outln("Finished importing and setting interconnect component parameters");
};  // import_and_set_interconnects()


write_output_files = define(csv_Runners, csv_Headers, csv_Loop, csv_SGS)
{
	// Output CSV file for runners
	rnr_diams = get('pipe_runner_diams');
	for ( i=0; i<#rnr_diams; i++ ) { rnr_index[i] = i; }
	rnr.index = rnr_index;
	rnr.Diameter_m = get('pipe_runner_diams');
	rnr.WallThk_m = get('pipe_runner_wallthk');
	rnr.Length_m = get('pipe_runner_lengths');
	rnr.Expansions = get('pipe_runner_expansions');
	rnr.MassFlow_kg_s = get('pipe_runner_mdot_dsn');
	rnr.Velocity_m_s = get('pipe_runner_vel_dsn');
	rnr.Temp_C = get('pipe_runner_T_dsn');
	rnr.P_gauge_bar = get('pipe_runner_P_dsn');
	ok = csvwrite( csv_Runners, rnr,
		{ 'cols'=['index', 'Diameter_m', 'WallThk_m', 'Length_m', 'Expansions',
			'MassFlow_kg_s', 'Velocity_m_s', 'Temp_C', 'P_gauge_bar'] } );

	// Output CSV file for headers
	hdr_diams = get('pipe_header_diams');
	for ( i=0; i<#hdr_diams; i++ ) { hdr_index[i] = i; }
	hdr.index = hdr_index;
	hdr.Diameter_m = get('pipe_header_diams');
	hdr.WallThk_m = get('pipe_header_wallthk');
	hdr.Length_m = get('pipe_header_lengths');
	hdr.Expansions = get('pipe_header_expansions');
	hdr.MassFlow_kg_s = get('pipe_header_mdot_dsn');
	hdr.Velocity_m_s = get('pipe_header_vel_dsn');
	hdr.Temp_C = get('pipe_header_T_dsn');
	hdr.P_gauge_bar = get('pipe_header_P_dsn');
	ok = csvwrite( csv_Headers, hdr,
		{ 'cols'=['index', 'Diameter_m', 'WallThk_m', 'Length_m', 'Expansions',
			'MassFlow_kg_s', 'Velocity_m_s', 'Temp_C', 'P_gauge_bar'] } );

	// Output CSV file for loop
	loop_temps = get('pipe_loop_T_dsn');
	for ( i=0; i<#loop_temps; i++ ) { loop_index[i] = i; }
	loop.index = loop_index;
	loop.Temp_C = get('pipe_loop_T_dsn');
	loop.P_gauge_bar = get('pipe_loop_P_dsn');
	ok = csvwrite( csv_Loop, loop,
		{ 'cols'=['index', 'Temp_C', 'P_gauge_bar'] } );
	
	// Output CSV file for SGS
	sgs_diams = get('pipe_sgs_diams');
	for ( i=0; i<#sgs_diams; i++ ) { sgs_index[i] = i; }
	sgs.index = sgs_index;
	sgs.Diameter_m = get('pipe_sgs_diams');
	sgs.WallThk_m = get('pipe_sgs_wallthk');
	sgs.Length_m = get('L_tes_col_gen');
	sgs.MassFlow_kg_s = get('pipe_sgs_mdot_dsn');
	sgs.Velocity_m_s = get('pipe_sgs_vel_dsn');
	ok = csvwrite( csv_SGS, sgs,
		{ 'cols'=['index', 'Diameter_m', 'WallThk_m', 'Length_m',
			'MassFlow_kg_s', 'Velocity_m_s'] } );

	outln("Finished writing output files");
};  // write_output_files()
